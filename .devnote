SPDX-FileCopyrightText: 2024 Baptiste Legouix
SPDX-License-Identifier: GPL-3.0-or-later

----- This file contains personal notes to keep track of ideas, TODO or previous chunks of code which has been removed but could be useful in different context -----
----- Not supposed to be read by anyone other than me -----

cmake -DCMAKE_CXX_COMPILER=clang++-19 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-Wfatal-errors" ..

// Extract Elem from a row of YoungTableauSeq at index J
template <std::size_t J, std::size_t Id, class Row>
struct ExtractElem;

template <std::size_t J, std::size_t Id, std::size_t HeadElem, std::size_t... TailElem>
struct ExtractElem<J, Id, std::index_sequence<HeadElem, TailElem...>>
{
    using type = std::conditional_t<
            J == Id, 
            std::index_sequence<HeadElem>,
            typename ExtractElem<J, Id + 1, std::index_sequence<TailElem...>>::type>;
};

template <std::size_t J, class Row>
using extract_elem_t = ExtractElem<J, 0, Row>::type;

// Type of index used by projectors
template <std::size_t I>
struct ProjX
{
};

template <class Ids>
struct NaturalIndex;

template <std::size_t... Id>
struct NaturalIndex<std::index_sequence<Id...>>
{
    template <std::size_t RankId>
    struct type : sil::tensor::TensorNaturalIndex<ProjX<Id>...>
    {
    };
};

template <class NaturalIds, class RankIds>
struct ProjectorIndex;

template <std::size_t... Id, std::size_t... RankId>
struct ProjectorIndex<NaturalIndex<std::index_sequence<Id...>>, std::index_sequence<RankId...>>
{
    using type = sil::tensor::FullTensorIndex<
            typename NaturalIndex<std::index_sequence<Id...>>::template type<RankId>...>;
};

template <std::size_t Dimension, std::size_t Rank>
using projector_index_t = ProjectorIndex<
        NaturalIndex<std::make_index_sequence<Dimension>>,
        std::make_index_sequence<2 * Rank>>::type;

----- TODO -----

- sil::tensor::detail::Access implementation is not complete 
- Partial CTAD works for function. Check if it can simplify some implementations
- Primary-specialization is given by not writing <>. Maybe it can simplify some implementation
- tests for relabelize_indexes and relabelize_metric
- Unify TensorAccessor::access_element() functions. Also get<Dims...>() in Tensor ?
- inplace_apply_metric should not take both lower and upper indices as template arguments
